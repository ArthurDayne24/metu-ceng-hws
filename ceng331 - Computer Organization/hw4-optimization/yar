char matmul_optimized3_descr[] = "matmul_optimized3";
void matmul_optimized3(int n, int *src, int *src2, int *dst) {
    int i, j, k, r, nd = n >> 5, in = 0, kn = n;
    int *dstij, *src2ij, *src2i = src2;
    
    int *srci = src, *tsrci = src;
    for (i = 0; i < n; i++) {
        int *srcij = srci, *tsrcij = tsrci;
        for (j = i+1; j < n; j++) {
            int t = *srcij;
            *srcij = *tsrcij;
            *tsrcij = t;
            srcij++;
            tsrcij += n;
        }
        srci += n;
        tsrci++;
    }

    for (i = n; i-- ; ) {
        r  = src[in];
        dstij  = dst+in;
        src2ij = src2i;
        for (j = nd; j--;) {
            dstij[0 ] = r * src2ij[0 ];
            dstij[1 ] = r * src2ij[1 ];
            dstij[2 ] = r * src2ij[2 ];
            dstij[3 ] = r * src2ij[3 ];
            dstij[4 ] = r * src2ij[4 ];
            dstij[5 ] = r * src2ij[5 ];
            dstij[6 ] = r * src2ij[6 ];
            dstij[7 ] = r * src2ij[7 ];
            dstij[8 ] = r * src2ij[8 ];
            dstij[9 ] = r * src2ij[9 ];
            dstij[10] = r * src2ij[10];
            dstij[11] = r * src2ij[11];
            dstij[12] = r * src2ij[12];
            dstij[13] = r * src2ij[13];
            dstij[14] = r * src2ij[14];
            dstij[15] = r * src2ij[15];
            dstij[16] = r * src2ij[16];
            dstij[17] = r * src2ij[17];
            dstij[18] = r * src2ij[18];
            dstij[19] = r * src2ij[19];
            dstij[20] = r * src2ij[20];
            dstij[21] = r * src2ij[21];
            dstij[22] = r * src2ij[22];
            dstij[23] = r * src2ij[23];
            dstij[24] = r * src2ij[24];
            dstij[25] = r * src2ij[25];
            dstij[26] = r * src2ij[26];
            dstij[27] = r * src2ij[27];
            dstij[28] = r * src2ij[28];
            dstij[29] = r * src2ij[29];
            dstij[30] = r * src2ij[30];
            dstij[31] = r * src2ij[31];

            dstij  += 32;
            src2ij += 32;
        }
        in += n;
    }

    for (k = 1; k < n; k++) {
        in = 0;
        src2i = src2 + kn;
        for (i = n; i--;) {
            r  = src[in+k];
            dstij  = dst+in;
            src2ij = src2i;
            for (j = nd; j--;) {
                dstij[0 ] += r * src2ij[0 ];
                dstij[1 ] += r * src2ij[1 ];
                dstij[2 ] += r * src2ij[2 ];
                dstij[3 ] += r * src2ij[3 ];
                dstij[4 ] += r * src2ij[4 ];
                dstij[5 ] += r * src2ij[5 ];
                dstij[6 ] += r * src2ij[6 ];
                dstij[7 ] += r * src2ij[7 ];
                dstij[8 ] += r * src2ij[8 ];
                dstij[9 ] += r * src2ij[9 ];
                dstij[10] += r * src2ij[10];
                dstij[11] += r * src2ij[11];
                dstij[12] += r * src2ij[12];
                dstij[13] += r * src2ij[13];
                dstij[14] += r * src2ij[14];
                dstij[15] += r * src2ij[15];
                dstij[16] += r * src2ij[16];
                dstij[17] += r * src2ij[17];
                dstij[18] += r * src2ij[18];
                dstij[19] += r * src2ij[19];
                dstij[20] += r * src2ij[20];
                dstij[21] += r * src2ij[21];
                dstij[22] += r * src2ij[22];
                dstij[23] += r * src2ij[23];
                dstij[24] += r * src2ij[24];
                dstij[25] += r * src2ij[25];
                dstij[26] += r * src2ij[26];
                dstij[27] += r * src2ij[27];
                dstij[28] += r * src2ij[28];
                dstij[29] += r * src2ij[29];
                dstij[30] += r * src2ij[30];
                dstij[31] += r * src2ij[31];

                dstij  += 32;
                src2ij += 32;
            }
            in += n;
        }
        kn += n;
    }
}

