#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Onur Can TIRTIR / 2099380

# 1- Implemented set cc in pipe-full.hcl for iaddq's in order to prevent using andq's
# 2- In hardcoded part, first read the i+1'th element and write i'th element
#    to prevent data dependency
# 3- In main loop, copy i'th and i+1'th elements sequentially write them 
#    sequentially to prevent data dependency. I also used 2 different registers to
#    prevent data hazard
# 4- Remove unnecessary jmp by adding/repeating same small code snippets just
#    to gain 1 instruction = approximately 3 stages of computations
# 5- Use 8 way loop unrolling to benefit CPU ability
# NOTE: See detailed expanations in below comment written for each instruction

##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Remaining header
    xorq %rax, %rax     # ctr = 0
    iaddq -7, %rdx      # subtract 7 to check and check if new rdx > 0
                        # ..if greater than 8 elements,
    jg EightUnrRemaining            #   then run 8 way unrolled main loop
                        # else skip the unrolled main loop

    iaddq 7, %rdx       # correct rdx as it before and check if new rdx > 0
    mrmovq (%rdi), %r9	# read val from src
                        # here is the trick! >>
                        # > for each element in hardcoded part, 
                        # > read i+1'th element and write i'th element
                        # > in order to break data dependency in hardcodded loop

    jg Remaining1       # if there is no element then go to hardcodded part
    ret                 # else return

# start to unrolled 8 way loop
# for each 2 elements, first load from memory to registers,
# then copy them to break data dependency
# that is the trick to break data dependency in EightUnrRemaining
EightUnrRemaining:	
#############################
    mrmovq (%rdi), %r9	    # read val from src...
    mrmovq 8(%rdi), %r10	# read val from src...

    rmmovq %r9, (%rsi)	    # ...and store it to dst
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
    
    andq %r9, %r9           # if number is less than 0,
    jle FirstC              #  then skip increment 
    iaddq 1, %rax		    # else increment

FirstC:
    
    andq %r10, %r10         # if number is less than 0,
    jle SecondC             #  then skip increment 
	iaddq 1, %rax		    # else increment

##############################
SecondC:
    mrmovq 16(%rdi), %r9	# read val from src...
    mrmovq 24(%rdi), %r10	# read val from src...
    
    rmmovq %r9, 16(%rsi)	# ...and store it to dst
	rmmovq %r10, 24(%rsi)	# ...and store it to dst

    andq %r9, %r9           # if number is less than 0,  
    jle ThirdC              #  then skip increment 
	iaddq 1, %rax		    # else increment

ThirdC:
    andq %r10, %r10         # if number is less than 0,  
    jle FourthC             #  then skip increment 
	iaddq 1, %rax		    # else increment

##############################
FourthC:
    mrmovq 32(%rdi), %r9	# read val from src...
    mrmovq 40(%rdi), %r10	# read val from src...
    
    rmmovq %r9, 32(%rsi)	# ...and store it to dst
    rmmovq %r10, 40(%rsi)	# ...and store it to dst
	
    andq %r9, %r9           # if number is less than 0,  
    jle FifthC              #  then skip increment 
	iaddq 1, %rax		    # else increment

FifthC:
    andq %r10, %r10         # if number is less than 0,  
    jle SixthC              #  then skip increment 
	iaddq 1, %rax		    # else increment

##############################
SixthC:
    mrmovq 48(%rdi), %r9	# read val from src...
    mrmovq 56(%rdi), %r10	# read val from src...
    
    rmmovq %r9, 48(%rsi)	# ...and store it to dst
	rmmovq %r10, 56(%rsi)	# ...and store it to dst
	
    andq %r9, %r9           # if number is less than 0,
    jle SeventhC            #  then skip increment 
	iaddq 1, %rax		    # else increment

SeventhC:
    andq %r10, %r10	        # if number is less than 0,
    jle Stuff               #  then skip increment 
	iaddq 1, %rax	        # else increment   

### end ###

Stuff:
	iaddq 64, %rdi		    # src += 8, increment src ptr by 8
	iaddq 64, %rsi		    # dest += 8, increment dest ptr by 8 dst++
    iaddq -8, %rdx		    # len -= 8, decrement number of remaining elements by 8
                            #  and check rdx(len) > 0 for jump below

TestC:
	jg EightUnrRemaining	# if len > 0, then continue to unrolled main loop
                            # else fall through hardcoded loop
   
Rest:
    iaddq 7, %rdx           # correct rdx as it before and check if new rdx > 0
    mrmovq (%rdi), %r9	    # read val from src
    je Done                 # here is the trick! >>
                            # > each time, read i+1'th element and write i'th element
                            # > in order to break data dependency in hardcoded part

# In this hardcoded part, use trick explained just above
# Each time copy i+1'th element and write i'th element
# Also check if len > 0 in CntCheck's
Remaining1:
#############################
    mrmovq 8(%rdi), %r10	# read val from src...
    rmmovq %r9, (%rsi)	    # ...and store it to dst

    andq %r9, %r9           # if number is less than 0,
    jle CntCheck1           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck1:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining2           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining2:
#############################
    mrmovq 16(%rdi), %r9	# read val from src...
	rmmovq %r10, 8(%rsi)	# ...and store it to dst
    
    andq %r10, %r10         # if number is less than 0,
    jle CntCheck2           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck2:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining3           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining3:
#############################
    mrmovq 24(%rdi), %r10	# read val from src...
    rmmovq %r9, 16(%rsi)	# ...and store it to dst
    
    andq %r9, %r9           # if number is less than 0,
    jle CntCheck3           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck3:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining4           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining4:
#############################
    mrmovq 32(%rdi), %r9	# read val from src...
    rmmovq %r10, 24(%rsi)	# ...and store it to dst
    
    andq %r10, %r10         # if number is less than 0,
    jle CntCheck4           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck4:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining5           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining5:
#############################
    mrmovq 40(%rdi), %r10	# read val from src...
    rmmovq %r9, 32(%rsi)	# ...and store it to dst
    
    andq %r9, %r9           # if number is less than 0,
    jle CntCheck5           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck5:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining6           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining6:
#############################
    mrmovq 48(%rdi), %r9	# read val from src...
    rmmovq %r10, 40(%rsi)	# ...and store it to dst
    
    andq %r10, %r10         # if number is less than 0,
    jle CntCheck6           #  then skip increment 
    iaddq 1, %rax		    # else increment

CntCheck6:
    iaddq -1, %rdx          # We have len - 1 remaining elements, so decrement rdx by 1
                            # in the mean time, check if there are other elements to
                            # decide if continue or return
    jg Remaining7           # If there does exist remaining elements, then continue
    ret                     # Else return

Remaining7:
#############################
    rmmovq %r9, 48(%rsi)	# ...and store it to dst
    
    andq %r9, %r9           # if number is less than 0,
    jle Done                #  then skip increment 
    iaddq 1, %rax		    # else increment

# fall through return

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
